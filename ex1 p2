import numpy as np

class XarxaNeuronal:
    def __init__(self, inputs):
        self.inputs = 2
        self.hidden = 3
        self.outputs = 2
        self.weights_inputs = np.ones((self.inputs, self.hidden))
        self.weights_outputs = np.ones((self.hidden, self.outputs))
        self.bias_hidden = np.ones(self.hidden)
        self.bias_outputs = np.ones(self.outputs)

    def sigmoid(self, x):
        return 1 / (1 + np.exp(-x))

    def sigmoid_derivative(self, x):
        return x * (1 - x)

    def feedforward(self, inputs):
        hidden_input = np.dot(inputs, self.weights_inputs) + self.bias_hidden
        hidden_output = self.sigmoid(hidden_input)
        output_input = np.dot(hidden_output, self.weights_outputs) + self.bias_outputs
        output = self.sigmoid(output_input)
        return output

    def train(self, inputs, targets, epochs):
        for epoch in range(epochs):
            # Feedforward
            hidden_input = np.dot(inputs, self.weights_inputs) + self.bias_hidden
            hidden_output = self.sigmoid(hidden_input)
            output_input = np.dot(hidden_output, self.weights_outputs) + self.bias_outputs
            output = self.sigmoid(output_input)

            # Càlcul de l'error
            error = targets - output

            # Retropropagació
            output_delta = error * self.sigmoid_derivative(output)
            hidden_error = output_delta.dot(self.weights_outputs.T)
            hidden_delta = hidden_error * self.sigmoid_derivative(hidden_output)

            # Actualització de pesos i bies
            self.weights_outputs += hidden_output.T.dot(output_delta)
            self.weights_inputs += inputs.T.dot(hidden_delta)
            self.bias_outputs += np.sum(output_delta)
            self.bias_hidden += np.sum(hidden_delta)

            # Càlcul de l'error mitjà
            mean_error = np.mean(np.abs(error))
            print(f'Epoch: {epoch}, Error Mitjà: {mean_error}')

# Dades d'entrada i resultats desitjats
inputs = np.array([[0, 1]])
targets = np.array([[0, 1]])

# Creació de la xarxa i entrenament
xarxa = XarxaNeuronal(inputs)
xarxa.train(inputs, targets, epochs=1000)

# Prova de la xarxa entrenada
resultat = xarxa.feedforward(inputs)
print("Resultat final després de l'entrenament:")
print(resultat)
